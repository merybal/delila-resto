openapi: 3.0.1
info:
  title: "Delilah Rest√≥"
  description: "Restaurant API, for recieving and procesing orders, as well as creating new users, both clients and admins."
  contact:
    email: "merybaltar@gmail.com"
  version: "1.0.0"

servers: 
  - url: https://localhost:3000/v1
  - url: http://localhost:3000/v1

tags:
- name: "users"
  description: "Operations related to the users"
- name: "orders"
  description: "Operations related to the orders"
- name: "products"
  description: "Operations related to the products"

paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Creates a new user account."
      operationId: "addUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/new_user"
      security: []
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/created_user"
        400:
          $ref: "#/components/responses/bad_request"
        409:
          description: "Username or email already in use"
        default:
          $ref: "#/components/responses/internal_server_error"

    get:
      tags:
        - "users"
      summary: "Returns a list of existing users. Admin access only."
      operationId: "listUsers"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_list"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        default:
          $ref: "#/components/responses/internal_server_error"

  /users/login:
    post:
      tags:
        - "users"
      security: []
      summary: "User log in to account."
      operationId: "loginUser"
      requestBody:
        description: "Log in data"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/log_in"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
        400:
          description: "Incorrect username or password / Please fill in all the fields"
        409:
          description: "User disabled"
        default:
          $ref: "#/components/responses/internal_server_error"

  /users/{id_user}:
    get:
      tags: 
        - "users"
      summary: "Gets user by id. Admin can get all users, user can only get their own info."
      operationId: "getUser"
      parameters:
        - name: id_user
          in: path
          description: "user id"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full_user"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "/components/responses/forbidden"
        404:
          description: "ID {id_user} not found"
        default:
          $ref: "#/components/responses/internal_server_error"
    
    patch:
      tags:
        - "users"
      summary: "Give or remove users' admin privileges. Admin access only."
      operationId: "makeAdmin"
      parameters: 
        - name: id_user
          in: path
          description: "user id"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK."
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          description: "ID {id_user} not found"
        default:
          $ref: "#/components/responses/internal_server_error"

  /orders:
    post:
      tags: 
        - "orders"
      summary: "Creates a new order."
      operationId: "createOrder"
      requestBody:
        description: "Required input to create body"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_order"
        required: true
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/created_order"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        default:
          $ref: "#/components/responses/internal_server_error"

    get:
      tags:
        - "orders"
      summary: "Returns a list of existing orders (even concluded ones). Admin has access to all orders, non admin only to their own."    
      operationId: "listOrders"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order_list"
        401:
          $ref: "#/components/responses/unauthorized"      
        default:
          $ref: "#/components/responses/internal_server_error"

  /orders/{id_order}:
    get:
      tags:
      - "orders"
      summary: "Gets order by id."
      operationId: "getOrder"
      parameters:
        - name: id_order
          in: path
          description: "order id"
          required: true
          schema: 
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/created_order"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"  
        404:
          description: "ID {id_order} not found"
        default:
          $ref: "#/components/responses/internal_server_error"

    patch: 
      tags:
        - "orders"
      summary: "Modifies order status from 1 to 5. Admin access only."
      operationId: "modifyOrder"
      parameters:
        - name: id_order
          in: path
          description: "order id"
          required: true
          schema: 
            type: string
      requestBody:
        description: "new status"
        content:
          application/json:
            schema:
             $ref: "#/components/schemas/new_status"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updated_order"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          description: "ID {id_order} not found"
        409:
          description: "Please select id_status from 1 to 5"
        default:
          $ref: "#/components/responses/internal_server_error"

    delete:
      tags:
        - "orders"
      summary: "Updates order status to CANCELED. Admin access only."
      operationId: "cancelOrder"
      parameters:
        - name: id_order
          in: path
          description: "order id"
          required: true
          schema:
            type: string
      responses:
        200:   
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleted_order"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          description: "ID {id_product} not found"
        default:
          $ref: "#/components/responses/internal_server_error"

  /products:
    post:
      tags:
        - "products"
      summary: "Create a new product. Admin access only."
      operationId: "createProduct"
      requestBody:
        description: "Required input to create product"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_product"
        required: true
      responses:
        201:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/created_product"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        409:
          description: "Product name already in use"
        default:
          $ref: "#/components/responses/internal_server_error"

    get:
      tags:
        - "products"
      summary: "Returns a list of the existing products. Admin gets full list, user gets only enabled products"
      operationId: "listProducts"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product_list"
        401:
          $ref: "#/components/responses/unauthorized"
        default:
          $ref: "#/components/responses/internal_server_error"
   
  /products/{id_product}:
    get:
      tags:
        - "products"
      summary: "Gets product by id."
      operationId: "getProduct"
      parameters:
        - name: id_product
          in: path
          description: "product id"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full_product"
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          description: "ID {id_product} not found"
        409:
          description: "Product is disabled"        
        default:
          $ref: "#/components/responses/internal_server_error"
     
    put:
      tags:
        - "products"
      summary: "Modifies product data. Admin access only."
      operationId: "modifyProduct"
      parameters:
        - name: id_product
          in: path
          description: "product id"
          required: true
          schema:
            type: string
      requestBody:
        description: "Product data to be modified"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modified_product"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full_product"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          description: "ID {id_product} not found"       
        default:
          $ref: "#/components/responses/internal_server_error"

    delete:
      tags:
        - "products"
      summary: "Disables product (does not delete). Admin access only."
      operationId: "disableProduct"
      parameters:
        - name: id_product
          in: path
          description: "product id"
          required: true
          schema:
            type: string
      responses:
        200:   
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full_product"
        401:
          $ref: "#/components/responses/unauthorized"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          description: "ID {id_product} not found"
        default:
          $ref: "#/components/responses/internal_server_error"
        
components:
  schemas:
  # user related
    new_user:
      type: object
      properties:
        username:
          type: string
          example: pepegrillo
        full_name:
          type: string
          example: Pepe Grillo
        email:
          type: string
          example: pepegrillo@losgrillos.com
        phone_number:
          type: integer
          example: 1125467465
        adress:
          type: string
          example: Calle Falsa 123
        password:
          type: string
          example: mySup3rSecr3tPass12
          
    created_user:
      type: object
      properties:
        id_user:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: pepegrillo
        full_name:
          type: string
          example: Pepe Grillo
        email:
          type: string
          example: pepegrillo@losgrillos.com
        phone_number:
          type: integer
          example: 1125467465
        adress:
          type: string
          example: Calle Falsa 123
    
    full_user:
      type: object
      properties:
        id_user:
          type: integer
          format: int64
          example: 12
        username:
          type: string
          example: pepegrillo
        full_name:
          type: string
          example: Pepe Grillo
        email:
          type: string
          example: pepegrillo@losgrillos.com
        phone_number:
          type: integer
          example: 1125467465
        adress:
          type: string
          example: Calle Falsa 123
        is_admin:
          type: boolean
          example: true
        is_enabled:
          type: boolean
          example: true

    user_list:
      type: array
      items:
        $ref: "#/components/schemas/full_user"
    
    log_in:
      type: object
      properties:
        username:
          description: 'username or email'
          type: string
          example: pepegrillo
        password:
          type: string
          example: mySup3rSecr3tPass12

    token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    

  # order related
    new_order:
      type: object
      properties:
        products: 
          type: array
          items:
            $ref: "#/components/schemas/ordered_product"
        total_price:
          type: integer
          example: 390
        id_payment_method:
          type: number
          example: 1
        id_user:
          type: integer
          format: int64
          example: 16

    created_order:
      type: object
      properties:
        id_order:
          type: integer
          format: int64
          example: 18
        status:
          type: string
          example: Nuevo
        time_stamp:
          type: string
          format: date-time
          example: "2020-05-26 21:02:15"
        products: 
          type: array
          items:
            $ref: "#/components/schemas/ordered_product"
        total_price:
          type: integer
          example: 390
        payment_method:
          type: number
          example: 1
        id_user:
          type: integer
          format: int64
          example: 16
        username:
          type: string
          example: pepegrillo
        full_name:
          type: string
          example: Pepe Grillo
        email:
          type: string
          example: pepegrillo@losgrillos.com
        phone_number:
          type: integer
          example: 1125467465
        adress:
          type: string
          example: Calle Falsa 123

    updated_order: 
      type: object
      properties:
        id_order: 
          type: integer
          format: int64
          example: 16
        status:
          type: string
          example: PREPARANDO
        time_stamp:
          type: string
          format: date-time
          example: "2020-05-26 21:02:15"
        total_price:
          type: integer
          example: 390
        id_payment_method:
          type: number
          example: 1
        id_user:
          type: integer
          format: int64
          example: 16

    deleted_order:
      type: object
      properties:
        id_order: 
          type: integer
          format: int64
          example: 16
        status:
          type: string
          example: CANCELADO
        time_stamp:
          type: string
          format: date-time
          example: "2020-05-26 21:02:15"
        total_price:
          type: integer
          example: 390
        id_payment_method:
          type: number
          example: 1
        id_user:
          type: integer
          format: int64
          example: 16

    order_list:
      type: array
      items:
        $ref: "#/components/schemas/created_order"

  # product related
    new_product:
      type: object
      properties:
        name:
          type: string
          example: Hamburguesa King
        image_url:
          type: string
          example: https://cocina-casera.com/wp-content/uploads/2016/11/hamburguesa-queso-receta.jpg
        price:
          type: number
          example: 450
        enabled:
          type: boolean
          example: true

    created_product:
      type: object
      properties:
        id_product:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Hamburguesa King
        image_url:
          type: string
          example: https://cocina-casera.com/wp-content/uploads/2016/11/hamburguesa-queso-receta.jpg
        price:
          type: number
          example: 390

    full_product:
      type: object
      properties:
        id_product:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Hamburguesa King
        image_url:
          type: string
          example: https://cocina-casera.com/wp-content/uploads/2016/11/hamburguesa-queso-receta.jpg
        price:
          type: number
          example: 390
        enabled:
          type: boolean
          example: true
    
    modified_product:
      type: object
      properties:
        name:
          type: string
          example: Hamburguesa King
        image_url:
          type: string
          example: https://cocina-casera.com/wp-content/uploads/2016/11/hamburguesa-queso-receta.jpg
        price:
          type: number
          example: 390
        enabled:
          type: boolean
          example: true
    
    new_status:
      type: object
      properties:
        id_status:
          type: integer
          format: int64
          example: 3

    ordered_product:
      type: object
      properties:
        id_product:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Hamburguesa King
        price:
          type: number
          example: 390
        image_url:
          type: string
          example: https://cocina-casera.com/wp-content/uploads/2016/11/hamburguesa-queso-receta.jpg
        product_quantity:
          type: integer
          format: int64
          example: 2

    product_list:
      type: array
      items: 
        $ref: "#/components/schemas/created_product"


  responses:
    succesful_request: #200
      description: "OK"
    created: #201
      description: "Created"
    bad_request: #400
      description: "Bad request"
    unauthorized: #401
      description: "Please log in to continue"
    forbidden: #403
      description: "Forbidden: user is not admin"
    not_found: #404
      description: "The requested resource was not found"
    conflict: #409 
      description: "The request could not be completed due to a conflict"
    internal_server_error: #500 / default
      description: "The request was not completed due to an internal error on the server side"
 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

          
          
          
          
          
          
          
          
          
          
          
          
          
          